@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  h2 {
    @apply font-PressStart2P drop-shadow-pixel-sm m-4 pt-4 text-lg md:text-xl;

    &::before {
      content: ">";
      margin-right: 0.5em;
    }
  }
}

@import "pixelated-rounded-corners.scss";

@font-face {
  font-family: "SfPixelate";
  src: url("/fonts/SfPixelate-wBgw.ttf");
}

@font-face {
  font-family: "Press Start 2P";
  src: url("/fonts/PressStart2P-Regular.ttf");
}

::-webkit-scrollbar {
  @apply w-auto;

  &-track {
    @apply bg-transparent;
  }

  &-thumb {
    @apply bg-blended hover:bg-bodyBright rounded-full;
  }

  &-corner {
    @apply bg-transparent;
  }
}

::selection {
  @apply bg-red-400 text-white;
}

:root {
  @apply bg-hero-brick-wall-purple bg-body;
}

body {
  overflow: overlay;
}

.my-link {
  @apply relative;

  &:hover {
    text-decoration: none;
  }

  &::after {
    @apply absolute left-0 bottom-0 block h-px w-full origin-left scale-x-100 bg-gray-400 transition-transform duration-300 ease-in-out;
    content: "";
  }

  &:hover::after {
    @apply origin-right scale-x-0;
  }

  &[hover-info]::before {
    @apply absolute left-0 bottom-0 block whitespace-nowrap rounded-xl bg-black bg-opacity-50 p-[1em] text-[.8em] text-white;
    content: attr(hover-info);

    transform: scale(0);
    transition: transform ease-out 150ms, bottom ease-out 150ms;
  }

  &[hover-info]:hover::before {
    @apply bg-black bg-opacity-50;

    transform: scale(1);
    bottom: 100%;
  }
}

.my-qualification {
  @apply relative;

  &[hover-info]::after {
    @apply font-SfPixelate absolute block whitespace-nowrap rounded-xl bg-black bg-opacity-50 p-[1em] text-center text-[.8rem] text-white;
    content: attr(hover-info);

    bottom: 0;
    left: 50%;
    transform: scale(0);
    transition: transform ease-out 150ms, bottom ease-out 150ms;
  }

  &[hover-info]:hover::after {
    @apply bg-black bg-opacity-50;

    transform: scale(1);
    transform: translateX(-50%);
    bottom: 100%;
  }
}

span.ripple {
  position: absolute;
  border-radius: 50%;
  background-color: rgba(255, 255, 255, 0.5);
  opacity: 1;
  transition: opacity 200ms linear;
  transform: scale(0);
  animation: ripple 600ms linear forwards;
}

span.ripple-fade-out {
  opacity: 0;
}

@keyframes ripple {
  to {
    transform: scale(3);
  }
}

.react-pdf__Document {
  line-height: 1;
}

@keyframes slide-to-left {
  to {
    transform: translateX(-100%);
  }
}

@keyframes slide-to-right {
  to {
    transform: translateX(100%);
  }
}

@keyframes slide-from-left {
  from {
    transform: translateX(-100%);
  }
}

@keyframes slide-from-right {
  from {
    transform: translateX(100%);
  }
}

@keyframes slide-and-fade-to-left {
  to {
    transform: translateX(-100%);
    opacity: 0;
  }
}

@keyframes slide-and-fade-to-right {
  to {
    transform: translateX(100%);
    opacity: 0;
  }
}

@keyframes slide-and-fade-from-left {
  from {
    transform: translateX(-100%);
    opacity: 0;
  }
}

@keyframes slide-and-fade-from-right {
  from {
    transform: translateX(100%);
    opacity: 0;
  }
}

::page-transition-outgoing-image(root) {
  animation: 500ms ease-out both slide-to-left;
}

::page-transition-incoming-image(root) {
  animation: 500ms ease-out both slide-from-right;
}

.back-transition::page-transition-outgoing-image(root) {
  animation: 500ms ease-out both slide-to-right;
}

.back-transition::page-transition-incoming-image(root) {
  animation: 500ms ease-out both slide-from-left;
}

@media (min-width: 768px) {
  ::page-transition-outgoing-image(root) {
    animation: 200ms ease-out both slide-and-fade-to-left;
  }

  ::page-transition-incoming-image(root) {
    animation: 200ms ease-out both slide-and-fade-from-right;
  }

  .back-transition::page-transition-outgoing-image(root) {
    animation: 200ms ease-out both slide-and-fade-to-right;
  }

  .back-transition::page-transition-incoming-image(root) {
    animation: 200ms ease-out both slide-and-fade-from-left;
  }
}

/* .transition-warming-up::page-transition-container(*),
.transition-warming-up::page-transition-incoming-image(*),
.transition-warming-up::page-transition-outgoing-image(*) {
  animation-play-state: paused !important;
} */
